# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: dapr/proto/runtime/v1/dapr.proto for package 'dapr.proto.runtime.v1'
# Original file comments:
#
# Copyright 2021 The Dapr Authors
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'grpc'
require 'dapr/proto/runtime/v1/dapr_pb'

module Dapr
  module Proto
    module Runtime
      module V1
        module Dapr
          # Dapr service provides APIs to user application to access Dapr building blocks.
          class Service

            include ::GRPC::GenericService

            self.marshal_class_method = :encode
            self.unmarshal_class_method = :decode
            self.service_name = 'dapr.proto.runtime.v1.Dapr'

            # Invokes a method on a remote Dapr app.
            # Deprecated: Use proxy mode service invocation instead.
            rpc :InvokeService, ::Dapr::Proto::Runtime::V1::InvokeServiceRequest, ::Dapr::Proto::Common::V1::InvokeResponse
            # Gets the state for a specific key.
            rpc :GetState, ::Dapr::Proto::Runtime::V1::GetStateRequest, ::Dapr::Proto::Runtime::V1::GetStateResponse
            # Gets a bulk of state items for a list of keys
            rpc :GetBulkState, ::Dapr::Proto::Runtime::V1::GetBulkStateRequest, ::Dapr::Proto::Runtime::V1::GetBulkStateResponse
            # Saves the state for a specific key.
            rpc :SaveState, ::Dapr::Proto::Runtime::V1::SaveStateRequest, ::Google::Protobuf::Empty
            # Queries the state.
            rpc :QueryStateAlpha1, ::Dapr::Proto::Runtime::V1::QueryStateRequest, ::Dapr::Proto::Runtime::V1::QueryStateResponse
            # Deletes the state for a specific key.
            rpc :DeleteState, ::Dapr::Proto::Runtime::V1::DeleteStateRequest, ::Google::Protobuf::Empty
            # Deletes a bulk of state items for a list of keys
            rpc :DeleteBulkState, ::Dapr::Proto::Runtime::V1::DeleteBulkStateRequest, ::Google::Protobuf::Empty
            # Executes transactions for a specified store
            rpc :ExecuteStateTransaction, ::Dapr::Proto::Runtime::V1::ExecuteStateTransactionRequest, ::Google::Protobuf::Empty
            # Publishes events to the specific topic.
            rpc :PublishEvent, ::Dapr::Proto::Runtime::V1::PublishEventRequest, ::Google::Protobuf::Empty
            # Bulk Publishes multiple events to the specified topic.
            rpc :BulkPublishEventAlpha1, ::Dapr::Proto::Runtime::V1::BulkPublishRequest, ::Dapr::Proto::Runtime::V1::BulkPublishResponse
            # Invokes binding data to specific output bindings
            rpc :InvokeBinding, ::Dapr::Proto::Runtime::V1::InvokeBindingRequest, ::Dapr::Proto::Runtime::V1::InvokeBindingResponse
            # Gets secrets from secret stores.
            rpc :GetSecret, ::Dapr::Proto::Runtime::V1::GetSecretRequest, ::Dapr::Proto::Runtime::V1::GetSecretResponse
            # Gets a bulk of secrets
            rpc :GetBulkSecret, ::Dapr::Proto::Runtime::V1::GetBulkSecretRequest, ::Dapr::Proto::Runtime::V1::GetBulkSecretResponse
            # Register an actor timer.
            rpc :RegisterActorTimer, ::Dapr::Proto::Runtime::V1::RegisterActorTimerRequest, ::Google::Protobuf::Empty
            # Unregister an actor timer.
            rpc :UnregisterActorTimer, ::Dapr::Proto::Runtime::V1::UnregisterActorTimerRequest, ::Google::Protobuf::Empty
            # Register an actor reminder.
            rpc :RegisterActorReminder, ::Dapr::Proto::Runtime::V1::RegisterActorReminderRequest, ::Google::Protobuf::Empty
            # Unregister an actor reminder.
            rpc :UnregisterActorReminder, ::Dapr::Proto::Runtime::V1::UnregisterActorReminderRequest, ::Google::Protobuf::Empty
            # Rename an actor reminder.
            rpc :RenameActorReminder, ::Dapr::Proto::Runtime::V1::RenameActorReminderRequest, ::Google::Protobuf::Empty
            # Gets the state for a specific actor.
            rpc :GetActorState, ::Dapr::Proto::Runtime::V1::GetActorStateRequest, ::Dapr::Proto::Runtime::V1::GetActorStateResponse
            # Executes state transactions for a specified actor
            rpc :ExecuteActorStateTransaction, ::Dapr::Proto::Runtime::V1::ExecuteActorStateTransactionRequest, ::Google::Protobuf::Empty
            # InvokeActor calls a method on an actor.
            rpc :InvokeActor, ::Dapr::Proto::Runtime::V1::InvokeActorRequest, ::Dapr::Proto::Runtime::V1::InvokeActorResponse
            # GetConfiguration gets configuration from configuration store.
            rpc :GetConfigurationAlpha1, ::Dapr::Proto::Runtime::V1::GetConfigurationRequest, ::Dapr::Proto::Runtime::V1::GetConfigurationResponse
            # GetConfiguration gets configuration from configuration store.
            rpc :GetConfiguration, ::Dapr::Proto::Runtime::V1::GetConfigurationRequest, ::Dapr::Proto::Runtime::V1::GetConfigurationResponse
            # SubscribeConfiguration gets configuration from configuration store and subscribe the updates event by grpc stream
            rpc :SubscribeConfigurationAlpha1, ::Dapr::Proto::Runtime::V1::SubscribeConfigurationRequest, stream(::Dapr::Proto::Runtime::V1::SubscribeConfigurationResponse)
            # SubscribeConfiguration gets configuration from configuration store and subscribe the updates event by grpc stream
            rpc :SubscribeConfiguration, ::Dapr::Proto::Runtime::V1::SubscribeConfigurationRequest, stream(::Dapr::Proto::Runtime::V1::SubscribeConfigurationResponse)
            # UnSubscribeConfiguration unsubscribe the subscription of configuration
            rpc :UnsubscribeConfigurationAlpha1, ::Dapr::Proto::Runtime::V1::UnsubscribeConfigurationRequest, ::Dapr::Proto::Runtime::V1::UnsubscribeConfigurationResponse
            # UnSubscribeConfiguration unsubscribe the subscription of configuration
            rpc :UnsubscribeConfiguration, ::Dapr::Proto::Runtime::V1::UnsubscribeConfigurationRequest, ::Dapr::Proto::Runtime::V1::UnsubscribeConfigurationResponse
            # TryLockAlpha1 tries to get a lock with an expiry.
            rpc :TryLockAlpha1, ::Dapr::Proto::Runtime::V1::TryLockRequest, ::Dapr::Proto::Runtime::V1::TryLockResponse
            # UnlockAlpha1 unlocks a lock.
            rpc :UnlockAlpha1, ::Dapr::Proto::Runtime::V1::UnlockRequest, ::Dapr::Proto::Runtime::V1::UnlockResponse
            # EncryptAlpha1 encrypts a message using the Dapr encryption scheme and a key stored in the vault.
            rpc :EncryptAlpha1, stream(::Dapr::Proto::Runtime::V1::EncryptRequest), stream(::Dapr::Proto::Runtime::V1::EncryptResponse)
            # DecryptAlpha1 decrypts a message using the Dapr encryption scheme and a key stored in the vault.
            rpc :DecryptAlpha1, stream(::Dapr::Proto::Runtime::V1::DecryptRequest), stream(::Dapr::Proto::Runtime::V1::DecryptResponse)
            # Gets metadata of the sidecar
            rpc :GetMetadata, ::Google::Protobuf::Empty, ::Dapr::Proto::Runtime::V1::GetMetadataResponse
            # Sets value in extended metadata of the sidecar
            rpc :SetMetadata, ::Dapr::Proto::Runtime::V1::SetMetadataRequest, ::Google::Protobuf::Empty
            # SubtleGetKeyAlpha1 returns the public part of an asymmetric key stored in the vault.
            rpc :SubtleGetKeyAlpha1, ::Dapr::Proto::Runtime::V1::SubtleGetKeyRequest, ::Dapr::Proto::Runtime::V1::SubtleGetKeyResponse
            # SubtleEncryptAlpha1 encrypts a small message using a key stored in the vault.
            rpc :SubtleEncryptAlpha1, ::Dapr::Proto::Runtime::V1::SubtleEncryptRequest, ::Dapr::Proto::Runtime::V1::SubtleEncryptResponse
            # SubtleDecryptAlpha1 decrypts a small message using a key stored in the vault.
            rpc :SubtleDecryptAlpha1, ::Dapr::Proto::Runtime::V1::SubtleDecryptRequest, ::Dapr::Proto::Runtime::V1::SubtleDecryptResponse
            # SubtleWrapKeyAlpha1 wraps a key using a key stored in the vault.
            rpc :SubtleWrapKeyAlpha1, ::Dapr::Proto::Runtime::V1::SubtleWrapKeyRequest, ::Dapr::Proto::Runtime::V1::SubtleWrapKeyResponse
            # SubtleUnwrapKeyAlpha1 unwraps a key using a key stored in the vault.
            rpc :SubtleUnwrapKeyAlpha1, ::Dapr::Proto::Runtime::V1::SubtleUnwrapKeyRequest, ::Dapr::Proto::Runtime::V1::SubtleUnwrapKeyResponse
            # SubtleSignAlpha1 signs a message using a key stored in the vault.
            rpc :SubtleSignAlpha1, ::Dapr::Proto::Runtime::V1::SubtleSignRequest, ::Dapr::Proto::Runtime::V1::SubtleSignResponse
            # SubtleVerifyAlpha1 verifies the signature of a message using a key stored in the vault.
            rpc :SubtleVerifyAlpha1, ::Dapr::Proto::Runtime::V1::SubtleVerifyRequest, ::Dapr::Proto::Runtime::V1::SubtleVerifyResponse
            # Starts a new instance of a workflow
            rpc :StartWorkflowAlpha1, ::Dapr::Proto::Runtime::V1::StartWorkflowRequest, ::Dapr::Proto::Runtime::V1::StartWorkflowResponse
            # Gets details about a started workflow instance
            rpc :GetWorkflowAlpha1, ::Dapr::Proto::Runtime::V1::GetWorkflowRequest, ::Dapr::Proto::Runtime::V1::GetWorkflowResponse
            # Purge Workflow
            rpc :PurgeWorkflowAlpha1, ::Dapr::Proto::Runtime::V1::PurgeWorkflowRequest, ::Google::Protobuf::Empty
            # Terminates a running workflow instance
            rpc :TerminateWorkflowAlpha1, ::Dapr::Proto::Runtime::V1::TerminateWorkflowRequest, ::Google::Protobuf::Empty
            # Pauses a running workflow instance
            rpc :PauseWorkflowAlpha1, ::Dapr::Proto::Runtime::V1::PauseWorkflowRequest, ::Google::Protobuf::Empty
            # Resumes a paused workflow instance
            rpc :ResumeWorkflowAlpha1, ::Dapr::Proto::Runtime::V1::ResumeWorkflowRequest, ::Google::Protobuf::Empty
            # Raise an event to a running workflow instance
            rpc :RaiseEventWorkflowAlpha1, ::Dapr::Proto::Runtime::V1::RaiseEventWorkflowRequest, ::Google::Protobuf::Empty
            # Shutdown the sidecar
            rpc :Shutdown, ::Google::Protobuf::Empty, ::Google::Protobuf::Empty
          end

          Stub = Service.rpc_stub_class
        end
      end
    end
  end
end
